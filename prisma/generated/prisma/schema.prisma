// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum CheckoutStatus {
  PENDING
  PAID
  FAILED
  CANCELED
  FULFILLED
}

model User {
  id              String   @id @default(uuid())
  username        String
  email           String   @unique
  password        String
  profilePhotoUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  saved     Saved?
  checkouts Checkout[]

  @@index([email])
}

model Saved {
  id        String      @id @default(uuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     SavedItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model SavedItem {
  id        String   @id @default(uuid())
  savedId   String
  productId String
  createdAt DateTime @default(now())

  saved   Saved   @relation(fields: [savedId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@unique([savedId, productId])
  @@index([productId])
  @@index([savedId])
}

model Seller {
  id              String   @id @default(uuid())
  username        String
  email           String   @unique
  password        String
  profilePhotoUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  products Product[]

  @@index([email])
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())

  products Product[]
}

model Product {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  quantity    Int
  price       Decimal   @db.Decimal(10, 2)
  sellerId    String
  seller      Seller    @relation(fields: [sellerId], references: [id], onDelete: Restrict)
  createdAt   DateTime  @default(now())

  images       ProductImage[]
  checkoutItem CheckoutItem[]
  savedItem    SavedItem[]

  @@index([categoryId])
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  imageUrl  String
  order     Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([productId, order])
}

model Checkout {
  id        String         @id @default(uuid())
  userId    String?
  user      User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  status    CheckoutStatus @default(PENDING)
  total     Decimal        @db.Decimal(10, 2)
  createdAt DateTime       @default(now())

  items CheckoutItem[]

  @@index([userId])
}

model CheckoutItem {
  id          String  @id @default(uuid())
  checkoutId  String
  productId   String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)
  productName String

  checkout Checkout @relation(fields: [checkoutId], references: [id], onDelete: Cascade)
  product  Product  @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@index([checkoutId])
  @@index([productId])
}
